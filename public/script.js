{\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch (error) {\n    console.error('Error retrieving from localStorage:', error);\n    return defaultValue;\n  }
};\n\nconst setItemToLocalStorage = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }
};\n\n\n// --- Error Handling and Notifications (Illustrative - needs UI implementation) ---\nconst showNotification = (message, type = 'success') => {\n  // Implement UI to display notifications (e.g., using a notification library)\n  console.log(`${type.toUpperCase()}: ${message}`); // For console demonstration
};\n\n// --- Authentication (Illustrative - Basic, needs robust implementation) ---\nlet currentUser = getItemFromLocalStorage('currentUser', null); //Initially set current user based on localstorage\n\nconst setCurrentUser = (user) => {\n  currentUser = user;\n  setItemToLocalStorage('currentUser', user); // Store user info to localstorage on login/register
};\n\nconst logout = () => {\n  setCurrentUser(null);\n  // Additional logout actions:  clear cart, redirect to login\n  setItemToLocalStorage('cart', []); //Clear cart after logout\n  window.location.href = 'login.html';  //redirect to login page\n  showNotification("Logged out successfully!", 'success');
};\n\n\n// --- Product Data (Placeholder - In a real application, this would come from the backend) ---\nlet products = [\n    { id: 1, name: "T-Shirt", description: "A comfortable cotton t-shirt.", price: 20, imageUrl: "https://via.placeholder.com/150", category: "clothing", stock: 10 },\n    { id: 2, name: "Jeans", description: "Durable denim jeans.", price: 50, imageUrl: "https://via.placeholder.com/150", category: "clothing", stock: 15 },\n    { id: 3, name: "Laptop", description: "High-performance laptop.", price: 1200, imageUrl: "https://via.placeholder.com/150", category: "electronics", stock: 5 },\n    { id: 4, name: "Headphones", description: "Noise-canceling headphones.", price: 150, imageUrl: "https://via.placeholder.com/150", category: "electronics", stock: 20 },\n    { id: 5, name: "Running Shoes", description: "Lightweight running shoes.", price: 80, imageUrl: "https://via.placeholder.com/150", category: "shoes", stock: 8 }\n];\n\n// --- Cart Management ---\nlet cart = getItemFromLocalStorage('cart', []);  // Load cart data from localStorage on page load\n\nconst updateCart = (newCart) => {\n    cart = newCart;\n    setItemToLocalStorage('cart', cart); // Store updated cart to localStorage\n    updateCartDisplay(); // Refresh cart display
};\n\nconst addToCart = (productId, quantity = 1) => {\n    const product = products.find(p => p.id === productId);\n\n    if (!product) {\n        showNotification('Product not found.', 'error');\n        return;\n    }\n\n    if (product.stock < quantity) {\n        showNotification('Not enough stock available.', 'error');\n        return;\n    }\n\n    const existingItemIndex = cart.findIndex(item => item.id === productId);\n\n    if (existingItemIndex !== -1) {\n        // Increase quantity if item already exists in the cart\n        const updatedCart = [...cart]; //Create a copy\n        updatedCart[existingItemIndex].quantity += quantity;\n        updateCart(updatedCart);\n        showNotification('Item quantity updated.', 'success');\n    } else {\n        // Add a new item to the cart\n        const newCartItem = {\n            id: productId,\n            name: product.name,\n            price: product.price,\n            quantity: quantity,\n            imageUrl: product.imageUrl // Add image URL\n        };\n        updateCart([...cart, newCartItem]); // Create a copy with the new item\n        showNotification('Item added to cart.', 'success');\n    }
};\n\n\nconst removeFromCart = (productId) => {\n    const updatedCart = cart.filter(item => item.id !== productId);\n    updateCart(updatedCart);\n    showNotification('Item removed from cart.', 'success');
};\n\n\nconst changeQuantity = (productId, newQuantity) => {\n    const quantity = parseInt(newQuantity, 10);\n    if (isNaN(quantity) || quantity <= 0) {\n        showNotification('Invalid quantity.', 'error');\n        return;\n    }\n\n    const itemIndex = cart.findIndex(item => item.id === productId);\n    if (itemIndex === -1) {\n        showNotification('Item not found in cart.', 'error');\n        return;\n    }\n    const updatedCart = [...cart];\n    updatedCart[itemIndex].quantity = quantity;\n    updateCart(updatedCart);\n    showNotification('Quantity updated', 'success');
};\n\n// --- Product Listing Page Functionality (products.html) ---\nconst renderProducts = (filteredProducts) => {\n    const productContainer = document.getElementById('product-grid');\n    if (!productContainer) return;\n\n    productContainer.innerHTML = ''; // Clear existing content\n    (filteredProducts || products).forEach(product => {\n        const productCard = document.createElement('div');\n        productCard.classList.add('product-card');\n        productCard.innerHTML = `\n            <img src="${product.imageUrl}" alt="${product.name}" class="product-image">\n            <h3>${product.name}</h3>\n            <p>${product.description}</p>\n            <p>$${product.price}</p>\n            <button data-product-id="${product.id}" class="add-to-cart-button">Add to Cart</button>\n        `;\n        productContainer.appendChild(productCard);\n    });
};\n\nconst filterProducts = () => {\n    const categoryFilter = document.getElementById('category-filter')?.value || '';\n    const searchInput = document.getElementById('search-input')?.value.toLowerCase() || '';\n\n    let filteredProducts = products.filter(product => {\n        const matchesCategory = !categoryFilter || product.category === categoryFilter;\n        const matchesSearch = product.name.toLowerCase().includes(searchInput) || product.description.toLowerCase().includes(searchInput);\n\n        return matchesCategory && matchesSearch;\n    });\n\n    renderProducts(filteredProducts);
};\n\n// Event Listener Setup for the Product Listing Page\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('products.html')) {\n        renderProducts();  // Initial render\n        // Event Delegation for Add to Cart buttons\n        document.addEventListener('click', (event) => {\n            if (event.target.classList.contains('add-to-cart-button')) {\n                const productId = parseInt(event.target.dataset.productId, 10);\n                addToCart(productId);\n            }\n        });\n\n        // Event Listeners for Filtering\n        document.getElementById('category-filter')?.addEventListener('change', filterProducts);\n        document.getElementById('search-input')?.addEventListener('input', filterProducts);\n    }
});\n\n// --- Cart Display and Management (cart.html) ---\nconst updateCartDisplay = () => {\n    const cartItemsContainer = document.getElementById('cart-items');\n    const cartTotalElement = document.getElementById('cart-total');\n\n    if (!cartItemsContainer || !cartTotalElement) return;\n\n    cartItemsContainer.innerHTML = '';\n    let total = 0;\n\n    cart.forEach(item => {\n        const itemElement = document.createElement('div');\n        itemElement.classList.add('cart-item');\n        itemElement.innerHTML = `\n            <img src="${item.imageUrl}" alt="${item.name}" class="cart-item-image">\n            <span>${item.name} - $${item.price} x ${item.quantity} = $${(item.price * item.quantity).toFixed(2)}</span>\n            <input type="number" class="quantity-input" data-product-id="${item.id}" value="${item.quantity}" min="1">\n            <button class="remove-from-cart-button" data-product-id="${item.id}">Remove</button>\n        `;\n        cartItemsContainer.appendChild(itemElement);\n        total += item.price * item.quantity;\n    });\n\n    cartTotalElement.textContent = `Total: $${total.toFixed(2)}`;\n\n    // Event delegation for cart interactions\n    document.addEventListener('click', (event) => {\n      if (event.target.classList.contains('remove-from-cart-button')) {\n        const productId = parseInt(event.target.dataset.productId, 10);\n        removeFromCart(productId);\n      }\n    });\n\n    document.addEventListener('input', (event) => {\n      if (event.target.classList.contains('quantity-input')) {\n        const productId = parseInt(event.target.dataset.productId, 10);\n        const newQuantity = event.target.value;\n        changeQuantity(productId, newQuantity);\n      }\n    });
};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('cart.html')) {\n        updateCartDisplay();\n    }
});\n\n// --- Checkout Page (checkout.html) ---\nconst validateCheckoutForm = () => {\n    const form = document.getElementById('checkout-form');\n    if (!form) return false;\n\n    const isValid = form.checkValidity();\n    if (!isValid) {\n        form.reportValidity(); // Show browser's default validation messages\n    }\n    return isValid;
};\n\nconst placeOrder = async () => {\n    if (!validateCheckoutForm()) {\n        showNotification('Please fill in all required fields.', 'error');\n        return;\n    }\n\n    if (cart.length === 0) {\n        showNotification('Your cart is empty.', 'error');\n        return;\n    }\n\n    const shippingAddress = {\n        street: document.getElementById('shipping-street')?.value,\n        city: document.getElementById('shipping-city')?.value,\n        state: document.getElementById('shipping-state')?.value,\n        zip: document.getElementById('shipping-zip')?.value,\n        country: document.getElementById('shipping-country')?.value\n    };\n\n    const paymentInfo = {\n        cardNumber: document.getElementById('card-number')?.value,\n        expiryDate: document.getElementById('expiry-date')?.value,\n        cvv: document.getElementById('cvv')?.value\n    };\n\n    // Simulate order placement with API call (replace with actual API interaction)\n    try {\n        // Placeholder API call - replace with actual API endpoint and data\n        const orderData = {\n            userId: currentUser?.id, //Optional, if user is logged in\n            cart: cart,\n            shippingAddress: shippingAddress,\n            paymentInfo: paymentInfo\n        };\n\n        const response = await fetch(`${API_URL}/orders`, { // Example endpoint\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                // Add authentication headers if needed (e.g., Authorization: Bearer <token>)\n            },\n            body: JSON.stringify(orderData)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const orderConfirmation = await response.json(); // Assuming the backend returns confirmation\n\n        // Clear the cart on successful order\n        updateCart([]);\n        showNotification('Order placed successfully!  Check your order history.', 'success');\n        window.location.href = 'orders.html'; // Redirect to the order history page\n    } catch (error) {\n        console.error('Order placement failed:', error);\n        showNotification(`Order placement failed: ${error.message}`, 'error');\n    }
};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('checkout.html')) {\n        // Event Listener to the form on submit.\n        const checkoutForm = document.getElementById('checkout-form');\n        if (checkoutForm) {\n           checkoutForm.addEventListener('submit', (event) => {\n              event.preventDefault(); // Prevent default form submission\n              placeOrder();\n           });\n        }\n    }
});\n\n// --- Order History Page (orders.html) ---\nconst displayOrderHistory = async () => {\n    const orderHistoryContainer = document.getElementById('order-history');\n    if (!orderHistoryContainer || !currentUser) {\n        //If not logged in, it is not needed to fetch order history\n        orderHistoryContainer.innerHTML = '<p>Please login to view your order history.</p>';\n        return;\n    }\n\n    try {\n        // Replace with API call to fetch order history for the current user\n        // Placeholder API call - Replace with real API\n        const response = await fetch(`${API_URL}/orders?userId=${currentUser.id}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                // Add authentication headers if needed (e.g., Authorization: Bearer <token>)\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const orders = await response.json(); // Assuming the backend returns an array of orders\n\n        if (orders.length === 0) {\n            orderHistoryContainer.innerHTML = '<p>No orders found.</p>';\n            return;\n        }\n\n        orderHistoryContainer.innerHTML = orders.map(order => `\n            <div class="order-item">\n                <p>Order ID: ${order.id}</p>\n                <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n                <p>Total: $${order.total}</p>\n                <p>Status: ${order.status}</p>\n                <!-- Add details of the order -->\n            </div>\n        `).join('');\n\n    } catch (error) {\n        console.error('Error fetching order history:', error);\n        orderHistoryContainer.innerHTML = '<p>Failed to load order history.</p>';\n    }
};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('orders.html')) {\n        displayOrderHistory();\n    }
});\n\n// --- User Account Page (account.html) ---\nconst displayAccountInfo = () => {\n    const accountInfoContainer = document.getElementById('account-info');\n    const logoutButton = document.getElementById('logout-button'); // Added Logout button\n    if (!accountInfoContainer || !currentUser) {\n        accountInfoContainer.innerHTML = '<p>Please login to view your account information.</p>';\n        if (logoutButton) {\n            logoutButton.style.display = 'none'; // Hide logout button if not logged in\n        }\n        return;\n    }\n\n    // Populate the account info (replace with actual user data)\n    accountInfoContainer.innerHTML = `\n        <p>Username: ${currentUser.username}</p>\n        <p>Email: ${currentUser.email}</p>\n        <!-- Add more user details -->\n    `;\n\n    if (logoutButton) {\n        logoutButton.style.display = 'block'; // Show the logout button when logged in\n        logoutButton.addEventListener('click', logout); //Attach logout function to the button.\n    }
};\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('account.html')) {\n        displayAccountInfo();\n    }
});\n\n// --- Login and Register Pages (login.html, register.html) ---\nconst validateForm = (formId) => {\n    const form = document.getElementById(formId);\n    if (!form) return false;\n\n    const isValid = form.checkValidity();\n    if (!isValid) {\n        form.reportValidity(); // Trigger browser's default validation messages\n    }\n    return isValid;
};\n\n// Function to handle the login\nconst handleLogin = async (event) => {\n    event.preventDefault();\n    if (!validateForm('login-form')) {\n        return;\n    }\n\n    const username = document.getElementById('login-username')?.value;\n    const password = document.getElementById('login-password')?.value;\n\n    if (!username || !password) {\n        showNotification('Please enter username and password', 'error');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Login failed. Invalid credentials.');\n        }\n\n        const user = await response.json(); // Assuming the backend returns user data\n        setCurrentUser(user); // Store user in localStorage and update global variable\n        showNotification('Login successful!', 'success');\n        window.location.href = 'account.html'; // Redirect to account page\n    } catch (error) {\n        console.error('Login error:', error);\n        showNotification(`Login failed: ${error.message}`, 'error');\n    }
};\n\n\nconst handleRegistration = async (event) => {\n    event.preventDefault();\n    if (!validateForm('register-form')) {\n        return;\n    }\n\n    const username = document.getElementById('register-username')?.value;\n    const email = document.getElementById('register-email')?.value;\n    const password = document.getElementById('register-password')?.value;\n\n    if (!username || !email || !password) {\n        showNotification('Please fill in all registration fields.', 'error');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${API_URL}/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, email, password }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Registration failed.');\n        }\n\n        const newUser = await response.json(); // Assuming the backend returns user data\n        setCurrentUser(newUser); // Store the user in localStorage and update global variable\n        showNotification('Registration successful!', 'success');\n        window.location.href = 'account.html'; // Redirect to account page\n    } catch (error) {\n        console.error('Registration error:', error);\n        showNotification(`Registration failed: ${error.message}`, 'error');\n    }
};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (window.location.pathname.includes('login.html')) {\n        const loginForm = document.getElementById('login-form');\n        if (loginForm) {\n          loginForm.addEventListener('submit', handleLogin);\n        }\n    } else if (window.location.pathname.includes('register.html')) {\n        const registerForm = document.getElementById('register-form');\n        if (registerForm) {\n          registerForm.addEventListener('submit', handleRegistration);\n        }\n    }
});\n\n// --- Initialize - Run on app load ---\ndocument.addEventListener('DOMContentLoaded', () => {\n    //Check if user is logged in, if so, show the navbar/header accordingly.\n    const loginMenuItem = document.getElementById('login-menu');\n    const registerMenuItem = document.getElementById('register-menu');\n    const accountMenuItem = document.getElementById('account-menu');\n\n    if (currentUser) {\n        if (loginMenuItem) {\n           loginMenuItem.style.display = 'none';\n        }\n        if (registerMenuItem) {\n            registerMenuItem.style.display = 'none';\n        }\n        if (accountMenuItem) {\n            accountMenuItem.style.display = 'block';\n        }\n\n    }\n    else {\n        if (loginMenuItem) {\n            loginMenuItem.style.display = 'block';\n        }\n        if (registerMenuItem) {\n            registerMenuItem.style.display = 'block';\n        }\n        if (accountMenuItem) {\n            accountMenuItem.style.display = 'none';\n        }\n    }
}