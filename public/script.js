{\n  return document.querySelector(selector);
}\n\nfunction getAllElements(selector) {\n  return document.querySelectorAll(selector);
}\n\nfunction showNotification(message, type = 'success') {\n  const notification = document.createElement('div');\n  notification.textContent = message;\n  notification.classList.add('notification', type); // Add 'success' or 'error' class\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 3000); // Remove after 3 seconds
}\n\nfunction getCartFromLocalStorage() {\n  try {\n    const cartString = localStorage.getItem(CART_STORAGE_KEY);\n    return cartString ? JSON.parse(cartString) : [];\n  } catch (error) {\n    console.error('Error parsing cart from local storage:', error);\n    return []; // Return an empty cart in case of an error\n  }
}\n\nfunction setCartToLocalStorage(cart) {\n  try {\n    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));\n  } catch (error) {\n    console.error('Error saving cart to local storage:', error);\n  }
}\n\nfunction getOrdersFromLocalStorage() {\n  try {\n    const ordersString = localStorage.getItem(ORDERS_STORAGE_KEY);\n    return ordersString ? JSON.parse(ordersString) : [];\n  } catch (error) {\n    console.error('Error parsing orders from local storage:', error);\n    return [];\n  }
}\n\nfunction setOrdersToLocalStorage(orders) {\n  try {\n    localStorage.setItem(ORDERS_STORAGE_KEY, JSON.stringify(orders));\n  } catch (error) {\n    console.error('Error saving orders to local storage:', error);\n  }
}\n\n// --- Product Data (Simulated - Replace with API calls) ---\nlet products = []; // Initialize as an empty array\n\nasync function fetchProducts() {\n  try {\n    const response = await fetch(`${API_URL}/products`); // Assuming your API endpoint\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    products = await response.json();\n    return products; // Return the fetched products\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    showNotification('Failed to load products. Please try again later.', 'error');\n    return []; // Return an empty array in case of an error\n  }
}\n\n\n// --- Product Listing Page (products.html) ---\nfunction renderProductList(productsToRender) {\n  const productListContainer = getElement('#product-list');\n  if (!productListContainer) return; // Exit if the container doesn't exist\n\n  productListContainer.innerHTML = ''; // Clear existing content\n\n  if (productsToRender.length === 0) {\n    productListContainer.textContent = 'No products found.';\n    return;\n  }\n\n  productsToRender.forEach(product => {\n    const productCard = document.createElement('div');\n    productCard.classList.add('product-card');\n    productCard.innerHTML = `\n      <img src="${product.image}" alt="${product.name}">\n      <h3>${product.name}</h3>\n      <p class="price">$${product.price.toFixed(2)}</p>\n      <button class="add-to-cart" data-product-id="${product.id}">Add to Cart</button>\n      <a href="product-detail.html?id=${product.id}">View Details</a>\n    `;\n    productListContainer.appendChild(productCard);\n  });
}\n\n\n// --- Product Detail Page (product-detail.html) ---\nasync function renderProductDetail() {\n  const productId = new URLSearchParams(window.location.search).get('id');\n  if (!productId) return;\n\n  const productDetailContainer = getElement('#product-detail');\n  if (!productDetailContainer) return;\n\n  try {\n    const response = await fetch(`${API_URL}/products/${productId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const product = await response.json();\n\n    productDetailContainer.innerHTML = `\n      <img src="${product.image}" alt="${product.name}">\n      <h2>${product.name}</h2>\n      <p>${product.description}</p>\n      <p class="price">$${product.price.toFixed(2)}</p>\n      <button class="add-to-cart" data-product-id="${product.id}">Add to Cart</button>\n    `;\n  } catch (error) {\n    console.error('Error fetching product detail:', error);\n    productDetailContainer.innerHTML = '<p>Product not found.</p>';\n  }
}\n\n\n// --- Cart Management (Shared) ---\nfunction updateCartDisplay() {\n  const cartItems = getCartFromLocalStorage();\n  const cartTotalElement = getElement('#cart-total');\n  const cartCountElement = getElement('#cart-count'); // For the cart icon/badge\n\n  if (cartCountElement) {\n    cartCountElement.textContent = cartItems.length;\n  }\n\n  if (!cartTotalElement) return;\n\n  let total = 0;\n  cartItems.forEach(item => {\n    const product = products.find(p => p.id === item.productId);\n    if (product) {\n      total += product.price * item.quantity;\n    }\n  });\n\n  cartTotalElement.textContent = `$${total.toFixed(2)}`;
}\n\nfunction addToCart(productId) {\n  let cart = getCartFromLocalStorage();\n  const existingItem = cart.find(item => item.productId === productId);\n\n  if (existingItem) {\n    existingItem.quantity++;\n  } else {\n    cart.push({ productId, quantity: 1 });\n  }\n\n  setCartToLocalStorage(cart);\n  updateCartDisplay();\n  showNotification('Product added to cart!');
}\n\n\n// --- Cart Page (cart.html) ---\nfunction renderCart() {\n  const cartItems = getCartFromLocalStorage();\n  const cartContainer = getElement('#cart-items');\n  const cartTotalElement = getElement('#cart-total');\n  const emptyCartMessage = getElement('#empty-cart-message');\n\n  if (!cartContainer || !cartTotalElement) return;\n\n  cartContainer.innerHTML = ''; // Clear previous content\n\n  if (cartItems.length === 0) {\n    if (emptyCartMessage) {\n      emptyCartMessage.style.display = 'block'; // Show "Cart is empty" message\n    }\n    cartTotalElement.textContent = '$0.00';\n    return;\n  } else if (emptyCartMessage) {\n    emptyCartMessage.style.display = 'none'; // Hide if there are items\n  }\n\n  let total = 0;\n\n  cartItems.forEach(item => {\n    const product = products.find(p => p.id === item.productId);\n    if (product) {\n      const cartItemElement = document.createElement('div');\n      cartItemElement.classList.add('cart-item');\n      cartItemElement.innerHTML = `\n        <img src="${product.image}" alt="${product.name}" width="50">\n        <span>${product.name}</span>\n        <span>$${product.price.toFixed(2)}</span>\n        <input type="number" class="item-quantity" data-product-id="${product.id}" value="${item.quantity}" min="1">\n        <span>$${(product.price * item.quantity).toFixed(2)}</span>\n        <button class="remove-from-cart" data-product-id="${product.id}">Remove</button>\n      `;\n      cartContainer.appendChild(cartItemElement);\n      total += product.price * item.quantity;\n    }\n  });\n\n  cartTotalElement.textContent = `$${total.toFixed(2)}`;
}\n\n\nfunction updateCartItemQuantity(productId, newQuantity) {\n  let cart = getCartFromLocalStorage();\n  const itemIndex = cart.findIndex(item => item.productId === productId);\n\n  if (itemIndex !== -1) {\n    cart[itemIndex].quantity = parseInt(newQuantity, 10); // Ensure it's a number\n    if (cart[itemIndex].quantity <= 0) {\n      cart.splice(itemIndex, 1); // Remove if quantity is zero or less\n    }\n    setCartToLocalStorage(cart);\n    renderCart(); // Re-render the cart\n    updateCartDisplay(); // Update the cart display (total, count)\n  }
}\n\nfunction removeFromCart(productId) {\n  let cart = getCartFromLocalStorage();\n  cart = cart.filter(item => item.productId !== productId);\n  setCartToLocalStorage(cart);\n  renderCart();\n  updateCartDisplay();\n  showNotification('Product removed from cart!');
}\n\n\n// --- Checkout Page (checkout.html) ---\nfunction validateForm(form) {\n  let isValid = true;\n  const formElements = form.elements;\n\n  for (let i = 0; i < formElements.length; i++) {\n    const element = formElements[i];\n    if (element.required && !element.value) {\n      showNotification(`${element.name} is required.`, 'error');\n      element.focus();\n      isValid = false;\n      break;\n    }\n    // Add more specific validation rules as needed (e.g., email format, zip code)\n  }\n  return isValid;
}\n\nasync function placeOrder(event) {\n  event.preventDefault();\n\n  const checkoutForm = getElement('#checkout-form');\n  if (!checkoutForm) return;\n\n  if (!validateForm(checkoutForm)) {\n    return;\n  }\n\n  const cart = getCartFromLocalStorage();\n  if (cart.length === 0) {\n    showNotification('Your cart is empty.', 'error');\n    return;\n  }\n\n  const formData = new FormData(checkoutForm);\n  const orderDetails = {\n    shippingAddress: {\n      street: formData.get('street'),\n      city: formData.get('city'),\n      state: formData.get('state'),\n      zip: formData.get('zip'),\n      country: formData.get('country'),\n    },\n    billingAddress: {\n      street: formData.get('billing-street'),\n      city: formData.get('billing-city'),\n      state: formData.get('billing-state'),\n      zip: formData.get('billing-zip'),\n      country: formData.get('billing-country'),\n    },\n    items: cart,\n    // Add other order details from the form\n  };\n\n  try {\n    const response = await fetch(`${API_URL}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(orderDetails),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const orderConfirmation = await response.json(); // Assuming the API returns order confirmation\n    // Clear the cart after successful order placement\n    setCartToLocalStorage([]);\n    updateCartDisplay();\n    // Store the order in local storage\n    let orders = getOrdersFromLocalStorage();\n    orders.push(orderConfirmation);\n    setOrdersToLocalStorage(orders);\n\n    // Redirect to the order confirmation page\n    window.location.href = `order-confirmation.html?orderId=${orderConfirmation.orderId}`; // Assuming orderId is returned\n  } catch (error) {\n    console.error('Error placing order:', error);\n    showNotification('Failed to place order. Please try again.', 'error');\n  }
}\n\n\n// --- Order Confirmation Page (order-confirmation.html) ---\nfunction renderOrderConfirmation() {\n  const orderId = new URLSearchParams(window.location.search).get('orderId');\n  const orderConfirmationContainer = getElement('#order-confirmation');\n  if (!orderConfirmationContainer || !orderId) return;\n\n  try {\n    const orders = getOrdersFromLocalStorage();\n    const order = orders.find(o => o.orderId === orderId);\n\n    if (order) {\n      orderConfirmationContainer.innerHTML = `\n        <h2>Order Confirmation</h2>\n        <p>Thank you for your order!</p>\n        <p>Order ID: ${order.orderId}</p>\n        <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n        <p>Total: $${order.total.toFixed(2)}</p>\n        <h3>Shipping Address:</h3>\n        <p>${order.shippingAddress.street}</p>\n        <p>${order.shippingAddress.city}, ${order.shippingAddress.state} ${order.shippingAddress.zip}</p>\n        <p>${order.shippingAddress.country}</p>\n        <a href="orders.html">View Order History</a>\n      `;\n    } else {\n      orderConfirmationContainer.innerHTML = '<p>Order not found.</p>';\n    }\n  } catch (error) {\n    console.error('Error rendering order confirmation:', error);\n    orderConfirmationContainer.innerHTML = '<p>An error occurred.</p>';\n  }
}\n\n\n// --- Orders Page (orders.html) ---\nfunction renderOrders() {\n  const orders = getOrdersFromLocalStorage();\n  const ordersContainer = getElement('#orders-list');\n  if (!ordersContainer) return;\n\n  ordersContainer.innerHTML = ''; // Clear existing content\n\n  if (orders.length === 0) {\n    ordersContainer.textContent = 'No orders found.';\n    return;\n  }\n\n  orders.forEach(order => {\n    const orderElement = document.createElement('div');\n    orderElement.classList.add('order-item');\n    orderElement.innerHTML = `\n      <p>Order ID: ${order.orderId}</p>\n      <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n      <p>Total: $${order.total.toFixed(2)}</p>\n      <p>Status: ${order.status || 'Pending'}</p>\n      <a href="order-detail.html?orderId=${order.orderId}">View Details</a>\n    `;\n    ordersContainer.appendChild(orderElement);\n  });
}\n\n// --- Search and Filter (products.html) ---\nfunction filterProducts() {\n  const searchTerm = getElement('#search-input').value.toLowerCase();\n  const categoryFilter = getElement('#category-filter').value; // Assuming a select element\n  const priceFilter = getElement('#price-filter').value; // Assuming a select element\n\n  let filteredProducts = products.filter(product => {\n    const nameMatches = product.name.toLowerCase().includes(searchTerm);\n    const descriptionMatches = product.description.toLowerCase().includes(searchTerm); // Search in description too\n    const categoryMatches = categoryFilter === '' || product.category === categoryFilter; // Assuming a 'category' property\n    let priceMatches = true; // Default to true if no price filter\n\n    if (priceFilter !== '') {\n      const [min, max] = priceFilter.split('-').map(Number); // Example: "0-50", "50-100"\n      priceMatches = product.price >= min && product.price <= max;\n    }\n\n    return (nameMatches || descriptionMatches) && categoryMatches && priceMatches;\n  });\n\n  renderProductList(filteredProducts);
}\n\n\n// --- Event Listeners (Event Delegation and Initialization) ---\ndocument.addEventListener('DOMContentLoaded', async () => {\n  await fetchProducts(); // Fetch products on page load\n\n  // --- Product Listing Page ---\n  if (window.location.pathname.includes('products.html')) {\n    renderProductList(products); // Initial render\n    // Search and Filter\n    const searchInput = getElement('#search-input');\n    const categoryFilter = getElement('#category-filter');\n    const priceFilter = getElement('#price-filter');\n\n    if (searchInput) {\n      searchInput.addEventListener('input', filterProducts);\n    }\n    if (categoryFilter) {\n      categoryFilter.addEventListener('change', filterProducts);\n    }\n    if (priceFilter) {\n      priceFilter.addEventListener('change', filterProducts);\n    }\n  }\n\n  // --- Product Detail Page ---\n  if (window.location.pathname.includes('product-detail.html')) {\n    renderProductDetail();\n  }\n\n  // --- Cart Page ---\n  if (window.location.pathname.includes('cart.html')) {\n    renderCart();\n  }\n\n  // --- Checkout Page ---\n  if (window.location.pathname.includes('checkout.html')) {\n    const checkoutForm = getElement('#checkout-form');\n    if (checkoutForm) {\n      checkoutForm.addEventListener('submit', placeOrder);\n    }\n  }\n\n  // --- Order Confirmation Page ---\n  if (window.location.pathname.includes('order-confirmation.html')) {\n    renderOrderConfirmation();\n  }\n\n  // --- Orders Page ---\n  if (window.location.pathname.includes('orders.html')) {\n    renderOrders();\n  }\n\n  // --- Event Delegation for Add to Cart, Remove from Cart, Quantity Updates ---\n  document.addEventListener('click', (event) => {\n    if (event.target.classList.contains('add-to-cart')) {\n      const productId = event.target.dataset.productId;\n      if (productId) {\n        addToCart(productId);\n      }\n    } else if (event.target.classList.contains('remove-from-cart')) {\n      const productId = event.target.dataset.productId;\n      if (productId) {\n        removeFromCart(productId);\n      }\n    }\n  });\n\n  document.addEventListener('change', (event) => {\n    if (event.target.classList.contains('item-quantity')) {\n      const productId = event.target.dataset.productId;\n      const newQuantity = event.target.value;\n      if (productId) {\n        updateCartItemQuantity(productId, newQuantity);\n      }\n    }\n  });\n\n  // --- Initial Cart Display Update (on all pages) ---\n  updateCartDisplay();
}