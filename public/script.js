{}; // Namespace for the application\n\n// --- Authentication and Authorization ---\nApp.auth = {\n    currentUser: null, // Stores the currently logged-in user\n    // --- Utility functions ---\n    hashPassword: async (password) => { // Simulate password hashing for local storage\n        // In a real-world scenario, use a library like bcrypt for proper hashing\n        const encoder = new TextEncoder();\n        const data = encoder.encode(password);\n        const buffer = await crypto.subtle.digest("SHA-256", data);\n        const hashArray = Array.from(new Uint8Array(buffer));\n        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n        return hashHex;\n    },\n\n    // --- User Account Management ---\n    register: async (username, password, email) => { // Register a new user\n        if (!username || !password || !email) {\n            App.ui.displayError("All fields are required for registration.");\n            return;\n        }\n        try {\n            const hashedPassword = await App.auth.hashPassword(password);\n            const newUser = {\n                username,\n                password: hashedPassword,\n                email,\n                // Add other user details here\n            };\n            let users = JSON.parse(localStorage.getItem('users')) || [];\n            const existingUser = users.find(user => user.username === username || user.email === email);\n            if (existingUser) {\n                App.ui.displayError("Username or email already exists.");\n                return;\n            }\n\n            users.push(newUser);\n            localStorage.setItem('users', JSON.stringify(users));\n            App.ui.displaySuccess("Registration successful. Please log in.");\n            // Redirect to login page (assuming a function like App.router.goTo('login') exists)\n            window.location.href = 'login.html'; // Basic redirection\n        } catch (error) {\n            console.error("Registration error:", error);\n            App.ui.displayError("Registration failed. Please try again.");\n        }\n    },\n\n    login: async (username, password) => { // Login user\n        if (!username || !password) {\n            App.ui.displayError("Username and password are required.");\n            return;\n        }\n\n        try {\n            const hashedPassword = await App.auth.hashPassword(password);\n            const users = JSON.parse(localStorage.getItem('users')) || [];\n            const user = users.find(user => user.username === username);\n            if (user && user.password === hashedPassword) {\n                App.auth.currentUser = { username: user.username, email: user.email }; // Store relevant user info\n                localStorage.setItem('currentUser', JSON.stringify(App.auth.currentUser)); // Persist the session\n                App.ui.displaySuccess("Login successful!");\n                // Redirect to dashboard (assuming App.router.goTo('dashboard') exists)\n                window.location.href = 'dashboard.html'; // Basic redirection\n            } else {\n                App.ui.displayError("Invalid username or password.");\n            }\n        } catch (error) {\n            console.error("Login error:", error);\n            App.ui.displayError("Login failed. Please try again.");\n        }\n    },\n\n    logout: () => { // Logout user\n        App.auth.currentUser = null;\n        localStorage.removeItem('currentUser');\n        window.location.href = 'index.html'; // Redirect to the home page\n    },\n\n    // --- Password Reset (Simplified - real implementation would involve email verification) ---\n    resetPassword: async (username, newPassword) => {\n        if (!username || !newPassword) {\n            App.ui.displayError("Username and new password are required.");\n            return;\n        }\n\n        try {\n            const hashedPassword = await App.auth.hashPassword(newPassword);\n            let users = JSON.parse(localStorage.getItem('users')) || [];\n            const userIndex = users.findIndex(user => user.username === username);\n\n            if (userIndex !== -1) {\n                users[userIndex].password = hashedPassword;\n                localStorage.setItem('users', JSON.stringify(users));\n                App.ui.displaySuccess("Password reset successful. Please log in with your new password.");\n                window.location.href = 'login.html';\n            } else {\n                App.ui.displayError("User not found.");\n            }\n        } catch (error) {\n            console.error("Password reset error:", error);\n            App.ui.displayError("Password reset failed. Please try again.");\n        }\n    },\n\n    // --- Get Current User ---\n    getCurrentUser: () => {\n        if(App.auth.currentUser) return App.auth.currentUser;\n        const storedUser = localStorage.getItem('currentUser');\n        if (storedUser) {\n            App.auth.currentUser = JSON.parse(storedUser);\n        }\n        return App.auth.currentUser;\n    },\n\n    // --- Check Authentication ---\n    isAuthenticated: () => {\n        return !!App.auth.getCurrentUser();\n    }
};\n\n\n// --- UI Management ---\nApp.ui = {\n    // --- Generic UI Updates ---\n    displayError: (message) => {\n        const errorElement = document.createElement('div');\n        errorElement.classList.add('error-message'); // Use a CSS class for styling\n        errorElement.textContent = message;\n        const container = document.querySelector('.messages') || document.body; // Try to find a messages container\n        container.appendChild(errorElement);\n\n        // Auto-hide the message after a few seconds\n        setTimeout(() => {\n            errorElement.remove();\n        }, 5000); // Remove after 5 seconds\n    },\n\n    displaySuccess: (message) => {\n        const successElement = document.createElement('div');\n        successElement.classList.add('success-message');\n        successElement.textContent = message;\n        const container = document.querySelector('.messages') || document.body;\n        container.appendChild(successElement);\n\n        setTimeout(() => {\n            successElement.remove();\n        }, 3000);\n    },\n\n    // --- Dynamic Form Rendering (Simplified) ---\n    renderForm: (formId, formData) => {\n        const formContainer = document.getElementById(formId);\n        if (!formContainer || !formData) return;\n        formContainer.innerHTML = ''; // Clear previous content\n\n        formData.forEach(field => {\n            const fieldDiv = document.createElement('div');\n            fieldDiv.classList.add('form-group'); // Add a class for styling\n\n            const label = document.createElement('label');\n            label.setAttribute('for', field.id);\n            label.textContent = field.label;\n            fieldDiv.appendChild(label);\n\n            let input;\n            if (field.type === 'textarea') {\n                input = document.createElement('textarea');\n                input.id = field.id;\n                input.name = field.id;\n            } else if (field.type === 'select') {\n                input = document.createElement('select');\n                input.id = field.id;\n                input.name = field.id;\n                field.options.forEach(option => {\n                    const optionEl = document.createElement('option');\n                    optionEl.value = option.value;\n                    optionEl.textContent = option.label;\n                    input.appendChild(optionEl);\n                });\n            }\n            else {\n                input = document.createElement('input');\n                input.type = field.type || 'text';\n                input.id = field.id;\n                input.name = field.id;\n                input.value = field.value || '';  // Pre-populate if value exists\n            }\n\n\n            if (field.required) {\n                input.required = true;\n                label.textContent += '*'; // Indicate required fields\n            }\n\n            if (field.type !== 'select') {\n                input.addEventListener('input', (event) => {\n                    App.validation.validateField(event.target);\n                });\n            }\n\n\n            fieldDiv.appendChild(input);\n\n            const errorSpan = document.createElement('span');\n            errorSpan.classList.add('error-message');\n            errorSpan.id = `${field.id}-error`;\n            fieldDiv.appendChild(errorSpan);\n\n            formContainer.appendChild(fieldDiv);\n        });\n    },\n\n    // --- Populate Form (Populates form fields from a data object) ---\n    populateForm: (formId, data) => {\n        const form = document.getElementById(formId);\n        if (!form || !data) return;\n\n        for (const key in data) {\n            const element = form.elements[key];\n            if (element) {\n                if (element.type === 'radio' || element.type === 'checkbox') {\n                    element.checked = data[key];\n                } else if (element.tagName === 'SELECT') {\n                    element.value = data[key];\n                }\n                else {\n                    element.value = data[key];\n                }\n            }\n        }\n    },\n\n    // --- Get Form Data ---\n    getFormData: (formId) => {\n        const form = document.getElementById(formId);\n        if (!form) return null;\n\n        const formData = {};\n        Array.from(form.elements).forEach(element => {\n            if (element.name) {\n                if (element.type === 'radio' || element.type === 'checkbox') {\n                    formData[element.name] = element.checked;\n                }\n                 else if (element.tagName === 'SELECT') {\n                    formData[element.name] = element.value;\n                }\n                 else{\n                    formData[element.name] = element.value;\n                }\n            }\n        });\n        return formData;\n    }
};\n\n// --- Validation ---\nApp.validation = {\n    // --- Regular Expressions for Validation ---\n    patterns: {\n        email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n        zipCode: /^\\d{5}(-\\d{4})?$/,\n        phone: /^\\d{3}-\\d{3}-\\d{4}$/,\n        number: /^[0-9]+(\\.[0-9]{1,2})?$/\n    },\n\n    // --- Field Validation ---\n    validateField: (field) => {\n        const errorSpan = document.getElementById(`${field.id}-error`);\n        if (!errorSpan) return;\n        errorSpan.textContent = ''; // Clear previous error messages\n        field.classList.remove('invalid'); // Remove invalid class\n\n        if (field.required && !field.value) {\n            errorSpan.textContent = 'This field is required.';\n            field.classList.add('invalid');\n            return false;\n        }\n\n        if (field.value && field.type === 'email' && !App.validation.patterns.email.test(field.value)) {\n            errorSpan.textContent = 'Invalid email format.';\n            field.classList.add('invalid');\n            return false;\n        }\n\n        if (field.value && field.name === 'zipCode' && !App.validation.patterns.zipCode.test(field.value)) {\n            errorSpan.textContent = 'Invalid zip code format.';\n            field.classList.add('invalid');\n            return false;\n        }\n\n        if (field.value && field.name === 'phone' && !App.validation.patterns.phone.test(field.value)) {\n            errorSpan.textContent = 'Invalid phone number format.';\n            field.classList.add('invalid');\n            return false;\n        }\n\n        if (field.value && field.type === 'number' && !App.validation.patterns.number.test(field.value)) {\n            errorSpan.textContent = 'Invalid number format (e.g., 123 or 123.45).';\n            field.classList.add('invalid');\n            return false;\n        }\n\n        return true;\n    },\n\n    // --- Validate Form ---\n    validateForm: (formId) => {\n        const form = document.getElementById(formId);\n        if (!form) return false;\n\n        let isValid = true;\n        Array.from(form.elements).forEach(element => {\n            if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {\n                if (!App.validation.validateField(element)) {\n                    isValid = false;\n                }\n            }\n        });\n        return isValid;\n    }
};\n\n// --- Tax Form Management ---\nApp.taxForms = {\n    // --- Data Structure for Tax Forms (Simplified - Real-world would fetch from database or API) ---\n    forms: {\n        '1040': {\n            name: 'Form 1040',\n            description: 'U.S. Individual Income Tax Return',\n            fields: [\n                { id: 'firstName', label: 'First Name', type: 'text', required: true },\n                { id: 'lastName', label: 'Last Name', type: 'text', required: true },\n                { id: 'ssn', label: 'Social Security Number', type: 'text', required: true },\n                { id: 'income', label: 'Total Income', type: 'number' },\n                { id: 'adjustments', label: 'Adjustments to Income', type: 'number' },\n                { id: 'taxableIncome', label: 'Taxable Income', type: 'number', readonly: true }\n            ],\n            calculateTax: (formData) => { // Placeholder Tax Calculation\n                const income = parseFloat(formData.income) || 0;\n                const adjustments = parseFloat(formData.adjustments) || 0;\n                const taxableIncome = income - adjustments;\n                return {\n                    taxableIncome: taxableIncome,\n                    taxDue: taxableIncome * 0.15 // Simple tax calculation (15% flat rate)\n                };\n            }\n        },\n        'ScheduleA': {\n            name: 'Schedule A',\n            description: 'Itemized Deductions',\n            fields: [\n                { id: 'medicalExpenses', label: 'Medical Expenses', type: 'number' },\n                { id: 'stateLocalTaxes', label: 'State and Local Taxes', type: 'number' },\n                { id: 'charitableContributions', label: 'Cash Contributions to Charity', type: 'number' }\n            ],\n            calculateDeductions: (formData) => { // Placeholder Deduction Calculation\n                const medicalExpenses = parseFloat(formData.medicalExpenses) || 0;\n                const stateLocalTaxes = parseFloat(formData.stateLocalTaxes) || 0;\n                const charitableContributions = parseFloat(formData.charitableContributions) || 0;\n                return {\n                    totalDeductions: medicalExpenses + stateLocalTaxes + charitableContributions\n                };\n            }\n        },\n        // Add other tax forms and their fields here\n    },\n\n    // --- Get Form Details ---\n    getForm: (formType) => {\n        return App.taxForms.forms[formType];\n    },\n\n    // --- Save Form Data ---\n    saveFormData: (formType, formData) => {\n        if (!App.auth.isAuthenticated()) {\n            App.ui.displayError("You must be logged in to save tax form data.");\n            return;\n        }\n\n        const currentUser = App.auth.getCurrentUser();\n        if (!currentUser) return;\n\n        const existingTaxReturns = JSON.parse(localStorage.getItem('taxReturns')) || {};\n        if (!existingTaxReturns[currentUser.username]) {\n            existingTaxReturns[currentUser.username] = {};\n        }\n        existingTaxReturns[currentUser.username][formType] = formData;\n        localStorage.setItem('taxReturns', JSON.stringify(existingTaxReturns));\n        App.ui.displaySuccess("Form data saved.");\n    },\n\n    // --- Load Form Data ---\n    loadFormData: (formType) => {\n        if (!App.auth.isAuthenticated()) {\n            App.ui.displayError("You must be logged in to load tax form data.");\n            return null;\n        }\n\n        const currentUser = App.auth.getCurrentUser();\n        if (!currentUser) return null;\n\n        const existingTaxReturns = JSON.parse(localStorage.getItem('taxReturns')) || {};\n        if (existingTaxReturns[currentUser.username] && existingTaxReturns[currentUser.username][formType]) {\n            return existingTaxReturns[currentUser.username][formType];\n        }\n        return null;\n    }
};\n\n\n// --- Data Import/Export (Simplified - real implementations would use file uploads/APIs) ---\nApp.dataImport = {\n    // --- Example: Importing W-2 Data (using a simulated file upload) ---\n    importW2: (file) => {\n        // Simulate file parsing.  In reality, you'd parse the file content\n        //  (e.g., CSV, XML, JSON)\n        return new Promise((resolve, reject) => {\n            if (!file) {\n                reject(new Error('No file selected.'));\n                return;\n            }\n\n            const reader = new FileReader();\n\n            reader.onload = (event) => {\n                try {\n                    //Simulate parsing a JSON file for W-2 data\n                    const jsonData = JSON.parse(event.target.result);\n\n                    if (jsonData && jsonData.wages && jsonData.federalTaxWithheld) {\n                         resolve(jsonData);\n                    }\n                    else{\n                        reject(new Error('Invalid W-2 data format.'));\n                    }\n                }\n                catch(error){\n                    reject(new Error('Error parsing file: '+ error.message));\n                }\n            };\n\n            reader.onerror = (event) => {\n                reject(new Error('Error reading file: ' + event.target.error));\n            };\n\n            reader.readAsText(file); // Read the file as text to parse it\n        });\n    },\n\n    // ---  Example: Clear all data from a specific form ---\n    clearForm: (formType) => {\n        if (!App.auth.isAuthenticated()) {\n            App.ui.displayError("You must be logged in to clear tax form data.");\n            return;\n        }\n\n        const currentUser = App.auth.getCurrentUser();\n        if (!currentUser) return;\n\n        const existingTaxReturns = JSON.parse(localStorage.getItem('taxReturns')) || {};\n        if (existingTaxReturns[currentUser.username] && existingTaxReturns[currentUser.username][formType]) {\n            delete existingTaxReturns[currentUser.username][formType];\n            localStorage.setItem('taxReturns', JSON.stringify(existingTaxReturns));\n            App.ui.displaySuccess(`Data for ${formType} cleared.`);\n        }\n    }
};\n\n\n// --- Tax Calculation Engine (Placeholder) ---\nApp.taxCalculator = {\n    calculateTax: (formType, formData) => {\n        const formDetails = App.taxForms.getForm(formType);\n        if (!formDetails || !formDetails.calculateTax) {\n            return { error: "Calculation not available for this form." };\n        }\n        return formDetails.calculateTax(formData);\n    },\n\n    calculateDeductions: (formType, formData) => {\n        const formDetails = App.taxForms.getForm(formType);\n        if (!formDetails || !formDetails.calculateDeductions) {\n            return { error: "Deduction calculation not available for this form." };\n        }\n        return formDetails.calculateDeductions(formData);\n    }
};\n\n\n// --- Payment Processing (Simplified - using Stripe/PayPal would be actual implementation) ---\nApp.payment = {\n    processPayment: (amount) => {\n        return new Promise((resolve, reject) => {\n            if (amount <= 0) {\n                reject(new Error("Invalid payment amount."));\n                return;\n            }\n\n            // Simulate payment processing (replace with actual payment gateway integration)\n            setTimeout(() => {\n                const paymentSuccessful = Math.random() > 0.2; // Simulate 80% success rate\n                if (paymentSuccessful) {\n                    resolve({ transactionId: Math.random().toString(36).substring(2, 15) });\n                } else {\n                    reject(new Error("Payment failed. Please try again."));\n                }\n            }, 2000); // Simulate processing time\n        });\n    }
};\n\n// --- Electronic Filing (Simplified - actual implementation would integrate with IRS e-file) ---\nApp.efile = {\n    submitReturn: (taxReturnData) => {\n        return new Promise((resolve, reject) => {\n            // Simulate e-file submission (replace with IRS e-file integration)\n            setTimeout(() => {\n                const submissionSuccessful = Math.random() > 0.3; // Simulate 70% success rate\n                if (submissionSuccessful) {\n                    resolve({ confirmationNumber: Math.random().toString(36).substring(2, 15) });\n                } else {\n                    reject(new Error("E-file submission failed. Please try again."));\n                }\n            }, 3000);\n        });\n    }
};\n\n// --- Router/Navigation (Simplified - assumes HTML pages) ---\nApp.router = {\n    goTo: (page) => {\n        // Replace with a more robust router in a real application (e.g., using libraries)\n        window.location.href = `${page}.html`;\n    },\n    // --- Handle Authentication Required Pages ---\n    redirectToLoginIfNotAuthenticated: () => {\n        if (!App.auth.isAuthenticated() && window.location.pathname !== '/login.html' && window.location.pathname !== '/register.html' && window.location.pathname !=='/index.html') {\n            App.router.goTo('login');\n        }\n    }
};\n\n// --- Event Handlers and Initialization ---\n\n// Generic event delegation to handle multiple events on the same element\nApp.eventDelegate = (selector, eventType, callback) => {\n    document.addEventListener(eventType, (event) => {\n        if (event.target.closest(selector)) {\n            callback(event);\n        }\n    });
};\n\n// --- Initialization Functions for Specific Pages ---\nApp.initIndex = () => {\n    // Initialization logic for index.html\n    const loginLink = document.querySelector('#loginLink');\n    const registerLink = document.querySelector('#registerLink');\n\n    if (loginLink) {\n        loginLink.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.router.goTo('login');\n        });\n    }\n\n    if (registerLink) {\n        registerLink.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.router.goTo('register');\n        });\n    }
};\n\n\nApp.initLogin = () => {\n    // Initialization logic for login.html\n    const loginForm = document.getElementById('loginForm');\n    const resetPasswordLink = document.getElementById('resetPasswordLink');\n\n    if (loginForm) {\n        loginForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            await App.auth.login(username, password);\n        });\n    }\n\n    if (resetPasswordLink) {\n        resetPasswordLink.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.router.goTo('reset_password'); // Assuming you have a reset password page\n        });\n    }
};\n\nApp.initRegister = () => {\n    // Initialization logic for register.html\n    const registerForm = document.getElementById('registerForm');\n\n    if (registerForm) {\n        registerForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const username = document.getElementById('registerUsername').value;\n            const password = document.getElementById('registerPassword').value;\n            const email = document.getElementById('registerEmail').value;\n            await App.auth.register(username, password, email);\n        });\n    }
};\n\n\nApp.initDashboard = () => {\n    // Initialization logic for dashboard.html\n    App.router.redirectToLoginIfNotAuthenticated(); //Redirect if not authenticated\n    const currentUser = App.auth.getCurrentUser();\n    const usernameDisplay = document.getElementById('usernameDisplay');\n    const logoutButton = document.getElementById('logoutButton');\n\n    if (usernameDisplay && currentUser) {\n        usernameDisplay.textContent = `Welcome, ${currentUser.username}!`;\n    }\n\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    const taxFormsLink = document.getElementById('taxFormsLink');\n    if (taxFormsLink) {\n        taxFormsLink.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.router.goTo('tax_forms');\n        });\n    }
};\n\nApp.initTaxForms = () => {\n    App.router.redirectToLoginIfNotAuthenticated(); //Redirect if not authenticated\n    const logoutButton = document.getElementById('logoutButton');\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    // --- Populate Tax Form Links Dynamically ---\n    const taxFormList = document.getElementById('taxFormList');\n    if (taxFormList) {\n        for (const formType in App.taxForms.forms) {\n            const form = App.taxForms.forms[formType];\n            const listItem = document.createElement('li');\n            const link = document.createElement('a');\n            link.href = `#${formType}`;\n            link.textContent = form.name;\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                App.router.goTo(`tax_form_${formType}`); // Assuming corresponding pages\n            });\n            listItem.appendChild(link);\n            taxFormList.appendChild(listItem);\n        }\n    }
};\n\nApp.initTaxForm1040 = () => { //Initialization for tax_form_1040.html\n    App.router.redirectToLoginIfNotAuthenticated(); // Redirect if not authenticated\n    const logoutButton = document.getElementById('logoutButton');\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    const formType = '1040';\n    const formDetails = App.taxForms.getForm(formType);\n    const formContainer = document.getElementById('taxFormContainer');\n    const saveButton = document.getElementById('saveFormButton');\n    const calculateButton = document.getElementById('calculateTaxButton');\n    const clearDataButton = document.getElementById('clearDataButton');\n\n    if (formContainer && formDetails) {\n        App.ui.renderForm('taxFormContainer', formDetails.fields);\n        const savedData = App.taxForms.loadFormData(formType);\n        if (savedData) {\n            App.ui.populateForm('taxFormContainer', savedData);\n        }\n    }\n\n    if (saveButton) {\n        saveButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (!App.validation.validateForm('taxFormContainer')) {\n                App.ui.displayError('Please correct the errors in the form.');\n                return;\n            }\n            const formData = App.ui.getFormData('taxFormContainer');\n            App.taxForms.saveFormData(formType, formData);\n        });\n    }\n\n    if (calculateButton) {\n        calculateButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (!App.validation.validateForm('taxFormContainer')) {\n                App.ui.displayError('Please correct the errors in the form.');\n                return;\n            }\n            const formData = App.ui.getFormData('taxFormContainer');\n            const calculationResult = App.taxCalculator.calculateTax(formType, formData);\n\n            if (calculationResult.error) {\n                App.ui.displayError(calculationResult.error);\n            } else {\n                // Populate readonly field\n                const taxableIncomeField = document.getElementById('taxableIncome');\n                if (taxableIncomeField) {\n                   taxableIncomeField.value = calculationResult.taxableIncome;\n                }\n                App.ui.displaySuccess(`Taxable Income Calculated: ${calculationResult.taxableIncome} and Tax Due: ${calculationResult.taxDue}`);\n            }\n        });\n    }\n\n    if(clearDataButton){\n        clearDataButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.dataImport.clearForm(formType);\n            App.ui.populateForm('taxFormContainer', {}); // Clear the form on the UI\n        })\n    }\n
};\n\nApp.initTaxFormScheduleA = () => { //Initialization for tax_form_schedule_a.html\n    App.router.redirectToLoginIfNotAuthenticated(); // Redirect if not authenticated\n    const logoutButton = document.getElementById('logoutButton');\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    const formType = 'ScheduleA';\n    const formDetails = App.taxForms.getForm(formType);\n    const formContainer = document.getElementById('taxFormContainer');\n    const saveButton = document.getElementById('saveFormButton');\n    const calculateButton = document.getElementById('calculateDeductionsButton');\n    const clearDataButton = document.getElementById('clearDataButton');\n\n    if (formContainer && formDetails) {\n        App.ui.renderForm('taxFormContainer', formDetails.fields);\n        const savedData = App.taxForms.loadFormData(formType);\n        if (savedData) {\n            App.ui.populateForm('taxFormContainer', savedData);\n        }\n    }\n\n    if (saveButton) {\n        saveButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (!App.validation.validateForm('taxFormContainer')) {\n                App.ui.displayError('Please correct the errors in the form.');\n                return;\n            }\n            const formData = App.ui.getFormData('taxFormContainer');\n            App.taxForms.saveFormData(formType, formData);\n        });\n    }\n\n    if (calculateButton) {\n        calculateButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (!App.validation.validateForm('taxFormContainer')) {\n                App.ui.displayError('Please correct the errors in the form.');\n                return;\n            }\n            const formData = App.ui.getFormData('taxFormContainer');\n            const calculationResult = App.taxCalculator.calculateDeductions(formType, formData);\n\n            if (calculationResult.error) {\n                App.ui.displayError(calculationResult.error);\n            } else {\n                App.ui.displaySuccess(`Total Deductions: ${calculationResult.totalDeductions}`);\n            }\n        });\n    }\n\n    if(clearDataButton){\n        clearDataButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.dataImport.clearForm(formType);\n            App.ui.populateForm('taxFormContainer', {}); // Clear the form on the UI\n        })\n    }
};\n\nApp.initReview = () => {\n    App.router.redirectToLoginIfNotAuthenticated();\n    const logoutButton = document.getElementById('logoutButton');\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    const reviewContent = document.getElementById('reviewContent');\n    const previewButton = document.getElementById('previewButton');\n    const filingOptionsButton = document.getElementById('filingOptionsButton');\n\n    if (reviewContent) {\n        // --- Populate review content with tax data (example) ---\n        const formData1040 = App.taxForms.loadFormData('1040');\n        const formDataScheduleA = App.taxForms.loadFormData('ScheduleA');\n        let reviewHTML = '';\n\n        if (formData1040) {\n            reviewHTML += `<h2>Form 1040</h2>`;\n            for (const key in formData1040) {\n                reviewHTML += `<p>${App.taxForms.forms['1040'].fields.find(f => f.id === key)?.label || key}: ${formData1040[key]}</p>`;\n            }\n        } else {\n            reviewHTML += "<p>Form 1040 data not found.</p>";\n        }\n\n        if (formDataScheduleA) {\n            reviewHTML += `<h2>Schedule A</h2>`;\n            for (const key in formDataScheduleA) {\n                reviewHTML += `<p>${App.taxForms.forms['ScheduleA'].fields.find(f => f.id === key)?.label || key}: ${formDataScheduleA[key]}</p>`;\n            }\n        } else {\n            reviewHTML += "<p>Schedule A data not found.</p>";\n        }\n\n        reviewContent.innerHTML = reviewHTML;\n    }\n\n    if (previewButton) {\n        previewButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            // In a real app, generate a PDF/Preview\n            App.ui.displaySuccess("Tax Return Preview (Simulated).");\n        });\n    }\n\n    if (filingOptionsButton) {\n        filingOptionsButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            App.router.goTo('filing_options');\n        });\n    }
};\n\n\nApp.initFilingOptions = () => {\n    App.router.redirectToLoginIfNotAuthenticated();\n    const logoutButton = document.getElementById('logoutButton');\n    if (logoutButton) {\n        logoutButton.addEventListener('click', App.auth.logout);\n    }\n\n    const efileButton = document.getElementById('efileButton');\n    const printPdfButton = document.getElementById('printPdfButton');\n    const paymentButton = document.getElementById('paymentButton');\n    const paymentAmount = document.getElementById('paymentAmount');\n\n\n    if (efileButton) {\n        efileButton.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const formData1040 = App.taxForms.loadFormData('1040'); //Get Data to submit.\n            if (!formData1040) {\n                App.ui.displayError("Please complete Form 1040 before e-filing.");\n                return;\n            }\n\n            try {\n                const result = await App.efile.submitReturn(formData1040);\n                App.ui.displaySuccess(`E-file submission successful. Confirmation Number: ${result.confirmationNumber}`);\n                App.router.goTo('confirmation');\n\n            } catch (error) {\n                App.ui.displayError(error.message);\n            }\n        });\n    }\n\n    if (printPdfButton) {\n        printPdfButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            // In a real application, generate and download a PDF\n            App.ui.displaySuccess("Tax Return PDF (Simulated). Download functionality not yet implemented.");\n        });\n    }