{}, ...children) {\n    const element = document.createElement(tag);\n    for (const key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n            element.setAttribute(key, attributes[key]);\n        }\n    }\n    children.forEach(child => {\n        if (typeof child === 'string') {\n            element.appendChild(document.createTextNode(child));\n        } else if (child) {\n            element.appendChild(child);\n        }\n    });\n    return element;
}\n\nfunction displayNotification(message, type = 'success') {\n    const notification = createElement('div', { class: `notification ${type}` }, message);\n    document.body.appendChild(notification);\n    setTimeout(() => {\n        notification.remove();\n    }, 3000);
}\n\nfunction updateCartBadge() {\n    const cartBadge = document.getElementById('cart-badge');\n    if (cartBadge) {\n        cartBadge.textContent = cart.reduce((total, item) => total + item.quantity, 0);\n    }
}\n\n// --- API Interaction (Placeholder - Replace with actual API calls) ---\nasync function fetchData(endpoint) {\n    try {\n        const response = await fetch(`${API_URL}${endpoint}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Fetch error:', error);\n        displayNotification(`Error fetching data: ${error.message}`, 'error');\n        return null;\n    }
}\n\n// --- Cart Management Functions ---\nfunction saveCartToLocalStorage() {\n    localStorage.setItem('cart', JSON.stringify(cart));\n    updateCartBadge();
}\n\nfunction addToCart(productId, quantity = 1) {\n    const existingItemIndex = cart.findIndex(item => item.productId === productId);\n\n    if (existingItemIndex !== -1) {\n        cart[existingItemIndex].quantity += quantity;\n    } else {\n        cart.push({ productId, quantity });\n    }\n    saveCartToLocalStorage();\n    displayNotification('Item added to cart!');
}\n\nfunction updateCartItemQuantity(productId, newQuantity) {\n    const itemIndex = cart.findIndex(item => item.productId === productId);\n    if (itemIndex !== -1) {\n        if (newQuantity <= 0) {\n            cart.splice(itemIndex, 1); // Remove item if quantity is 0 or less\n        } else {\n            cart[itemIndex].quantity = newQuantity;\n        }\n        saveCartToLocalStorage();\n        // Re-render the cart\n        if (window.location.pathname === '/cart.html') {\n            renderCartPage();\n        }\n    }
}\n\nfunction removeFromCart(productId) {\n    cart = cart.filter(item => item.productId !== productId);\n    saveCartToLocalStorage();\n    // Re-render the cart\n    if (window.location.pathname === '/cart.html') {\n        renderCartPage();\n    }\n    displayNotification('Item removed from cart!');
}\n\n// --- Product Page Functions ---\nasync function fetchAndDisplayProducts() {\n    productsData = await fetchData('/products'); // Replace with your API endpoint\n    if (!productsData) return;\n\n    const productListContainer = document.getElementById('product-list');\n    if (!productListContainer) return;\n\n    productListContainer.innerHTML = ''; // Clear existing content\n\n    productsData.forEach(product => {\n        const productCard = createElement('div', { class: 'product-card' });\n        const productImage = createElement('img', { src: product.image, alt: product.name });\n        const productName = createElement('h3', {}, product.name);\n        const productPrice = createElement('p', {}, `$${product.price.toFixed(2)}`);\n        const productDescription = createElement('p', {}, product.description); // Add description\n        const viewDetailsButton = createElement('a', { href: `/product-detail.html?id=${product.id}` }, 'View Details');\n\n        productCard.appendChild(productImage);\n        productCard.appendChild(productName);\n        productCard.appendChild(productPrice);\n        productCard.appendChild(productDescription); // Add description\n        productCard.appendChild(viewDetailsButton);\n\n        productListContainer.appendChild(productCard);\n    });
}\n\n// --- Product Detail Page Functions ---\nasync function fetchAndDisplayProductDetail() {\n    const params = new URLSearchParams(window.location.search);\n    const productId = params.get('id');\n\n    if (!productId) {\n        console.error('Product ID not found in URL');\n        return;\n    }\n\n    const product = productsData.find(p => p.id === parseInt(productId)); // Assuming product IDs are numbers\n\n    if (!product) {\n        console.error('Product not found');\n        return;\n    }\n\n    const productDetailContainer = document.getElementById('product-detail');\n    if (!productDetailContainer) return;\n\n    productDetailContainer.innerHTML = ''; // Clear existing content\n\n    const productImage = createElement('img', { src: product.image, alt: product.name });\n    const productName = createElement('h2', {}, product.name);\n    const productPrice = createElement('p', {}, `$${product.price.toFixed(2)}`);\n    const productDescription = createElement('p', {}, product.description);\n    const addToCartButton = createElement('button', { class: 'add-to-cart-button', 'data-product-id': product.id }, 'Add to Cart');\n\n    productDetailContainer.appendChild(productImage);\n    productDetailContainer.appendChild(productName);\n    productDetailContainer.appendChild(productPrice);\n    productDetailContainer.appendChild(productDescription);\n    productDetailContainer.appendChild(addToCartButton);\n\n    // Add event listener for the "Add to Cart" button\n    addToCartButton.addEventListener('click', (event) => {\n        const productId = parseInt(event.target.dataset.productId);\n        addToCart(productId);\n    });
}\n\n// --- Cart Page Functions ---\nfunction renderCartPage() {\n    const cartContainer = document.getElementById('cart-items');\n    const cartTotalElement = document.getElementById('cart-total');\n    if (!cartContainer || !cartTotalElement) return;\n\n    cartContainer.innerHTML = ''; // Clear existing content\n    let total = 0;\n\n    if (cart.length === 0) {\n        cartContainer.innerHTML = '<p>Your cart is empty.</p>';\n        cartTotalElement.textContent = '$0.00';\n        return;\n    }\n\n    cart.forEach(async (cartItem) => {\n        const product = productsData.find(p => p.id === cartItem.productId); // Fetch product details\n\n        if (!product) {\n            console.warn(`Product with ID ${cartItem.productId} not found.`);\n            return; // Skip if product not found\n        }\n\n        const cartItemElement = createElement('div', { class: 'cart-item' });\n        const productImage = createElement('img', { src: product.image, alt: product.name, width: '50' });\n        const productName = createElement('span', {}, product.name);\n        const productPrice = createElement('span', {}, `$${product.price.toFixed(2)}`);\n        const quantityInput = createElement('input', { type: 'number', min: '1', value: cartItem.quantity, 'data-product-id': cartItem.productId, class: 'quantity-input' });\n        const removeButton = createElement('button', { 'data-product-id': cartItem.productId, class: 'remove-from-cart-button' }, 'Remove');\n\n        cartItemElement.appendChild(productImage);\n        cartItemElement.appendChild(productName);\n        cartItemElement.appendChild(productPrice);\n        cartItemElement.appendChild(quantityInput);\n        cartItemElement.appendChild(removeButton);\n\n        cartContainer.appendChild(cartItemElement);\n\n        const itemTotal = product.price * cartItem.quantity;\n        total += itemTotal;\n    });\n\n    cartTotalElement.textContent = `$${total.toFixed(2)}`;
}\n\n// --- Checkout Page Functions ---\nfunction renderCheckoutPage() {\n    const checkoutForm = document.getElementById('checkout-form');\n    if (!checkoutForm) return;\n\n    // Add event listener to the form\n    checkoutForm.addEventListener('submit', async (event) => {\n        event.preventDefault(); // Prevent default form submission\n\n        // Client-side form validation (basic example)\n        const name = document.getElementById('name').value;\n        const address = document.getElementById('address').value;\n        const city = document.getElementById('city').value;\n        const state = document.getElementById('state').value;\n        const zip = document.getElementById('zip').value;\n        const email = document.getElementById('email').value;\n        const cardNumber = document.getElementById('card-number').value;\n        const expiryDate = document.getElementById('expiry-date').value;\n        const cvv = document.getElementById('cvv').value;\n\n        if (!name || !address || !city || !state || !zip || !email || !cardNumber || !expiryDate || !cvv) {\n            displayNotification('Please fill in all required fields.', 'error');\n            return;\n        }\n\n        // Basic email validation\n        if (!/^\\S+@\\S+\\.\\S+$/.test(email)) {\n            displayNotification('Please enter a valid email address.', 'error');\n            return;\n        }\n\n        // Basic credit card validation (example - not comprehensive)\n        if (!/^\\d{16}$/.test(cardNumber)) {\n            displayNotification('Please enter a valid 16-digit card number.', 'error');\n            return;\n        }\n\n        // Prepare order data (including cart items)\n        const orderData = {\n            customer: {\n                name,\n                address,\n                city,\n                state,\n                zip,\n                email,\n            },\n            items: cart.map(item => ({ productId: item.productId, quantity: item.quantity })), // Send product IDs and quantities\n            // Add more order details as needed (e.g., shipping method)\n        };\n\n        // Send order data to the backend (replace with your API call)\n        try {\n            const response = await fetch(`${API_URL}/orders`, { // Replace with your API endpoint\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(orderData),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const orderConfirmation = await response.json(); // Assuming the backend returns an order confirmation\n\n            // Clear the cart after successful order placement\n            cart = [];\n            saveCartToLocalStorage();\n\n            // Redirect to the order confirmation page\n            window.location.href = `/order-confirmation.html?orderId=${orderConfirmation.orderId}`;\n            displayNotification('Order placed successfully!');\n\n        } catch (error) {\n            console.error('Order placement error:', error);\n            displayNotification(`Error placing order: ${error.message}`, 'error');\n        }\n    });
}\n\n// --- Order Confirmation Page Functions ---\nfunction renderOrderConfirmationPage() {\n    const params = new URLSearchParams(window.location.search);\n    const orderId = params.get('orderId');\n\n    if (!orderId) {\n        console.error('Order ID not found in URL');\n        return;\n    }\n\n    const orderConfirmationContainer = document.getElementById('order-confirmation');\n    if (!orderConfirmationContainer) return;\n\n    // Fetch order details from the API (replace with your API call)\n    fetch(`${API_URL}/orders/${orderId}`) // Replace with your API endpoint\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(order => {\n            // Display order details\n            orderConfirmationContainer.innerHTML = `\n                <h2>Order Confirmation</h2>\n                <p>Order ID: ${order.orderId}</p>\n                <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n                <p>Total: $${order.total.toFixed(2)}</p>\n                <p>Thank you for your order!</p>\n            `;\n        })\n        .catch(error => {\n            console.error('Error fetching order details:', error);\n            orderConfirmationContainer.innerHTML = '<p>Error loading order details.</p>';\n        });
}\n\n// --- Orders Page Functions (Order Tracking) ---\nfunction renderOrdersPage() {\n    const ordersContainer = document.getElementById('orders-list');\n    if (!ordersContainer) return;\n\n    // Fetch order history from the API (replace with your API call)\n    fetch(`${API_URL}/orders`) // Replace with your API endpoint\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(orders => {\n            if (orders.length === 0) {\n                ordersContainer.innerHTML = '<p>No orders found.</p>';\n                return;\n            }\n\n            orders.forEach(order => {\n                const orderItem = createElement('div', { class: 'order-item' });\n                orderItem.innerHTML = `\n                    <p>Order ID: ${order.orderId}</p>\n                    <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n                    <p>Total: $${order.total.toFixed(2)}</p>\n                    <p>Status: ${order.status}</p>\n                `;\n                ordersContainer.appendChild(orderItem);\n            });\n        })\n        .catch(error => {\n            console.error('Error fetching order history:', error);\n            ordersContainer.innerHTML = '<p>Error loading order history.</p>';\n        });
}\n\n// --- Search and Filter (Placeholder - Implement based on your needs) ---\nfunction setupSearchAndFilter() {\n    const searchInput = document.getElementById('search-input');\n    const filterSelect = document.getElementById('filter-select');\n\n    if (!searchInput || !filterSelect) return;\n\n    function filterProducts() {\n        const searchTerm = searchInput.value.toLowerCase();\n        const filterCategory = filterSelect.value;\n\n        const filteredProducts = productsData.filter(product => {\n            const matchesSearch = product.name.toLowerCase().includes(searchTerm) || product.description.toLowerCase().includes(searchTerm);\n            const matchesCategory = filterCategory === '' || product.category === filterCategory; // Assuming products have a 'category' property\n\n            return matchesSearch && matchesCategory;\n        });\n\n        // Display the filtered products (replace with your display logic)\n        const productListContainer = document.getElementById('product-list');\n        if (productListContainer) {\n            productListContainer.innerHTML = ''; // Clear existing content\n            filteredProducts.forEach(product => {\n                // Re-use the product card creation logic from fetchAndDisplayProducts\n                const productCard = createElement('div', { class: 'product-card' });\n                const productImage = createElement('img', { src: product.image, alt: product.name });\n                const productName = createElement('h3', {}, product.name);\n                const productPrice = createElement('p', {}, `$${product.price.toFixed(2)}`);\n                const productDescription = createElement('p', {}, product.description); // Add description\n                const viewDetailsButton = createElement('a', { href: `/product-detail.html?id=${product.id}` }, 'View Details');\n\n                productCard.appendChild(productImage);\n                productCard.appendChild(productName);\n                productCard.appendChild(productPrice);\n                productCard.appendChild(productDescription); // Add description\n                productCard.appendChild(viewDetailsButton);\n\n                productListContainer.appendChild(productCard);\n            });\n        }\n    }\n\n    searchInput.addEventListener('input', filterProducts);\n    filterSelect.addEventListener('change', filterProducts);
}\n\n// --- Event Delegation and Initialization ---\ndocument.addEventListener('DOMContentLoaded', () => {\n    // --- General Setup ---\n    updateCartBadge();\n\n    // --- Page-Specific Initialization ---\n    const pathname = window.location.pathname;\n\n    switch (pathname) {\n        case '/': // index.html\n        case '/index.html':\n            fetchAndDisplayProducts();\n            setupSearchAndFilter(); // Initialize search and filter\n            break;\n        case '/products.html':\n            fetchAndDisplayProducts();\n            setupSearchAndFilter(); // Initialize search and filter\n            break;\n        case '/product-detail.html':\n            fetchAndDisplayProducts(); // Ensure product data is loaded\n            fetchAndDisplayProductDetail();\n            break;\n        case '/cart.html':\n            fetchAndDisplayProducts(); // Ensure product data is loaded for cart display\n            renderCartPage();\n            break;\n        case '/checkout.html':\n            renderCheckoutPage();\n            break;\n        case '/order-confirmation.html':\n            renderOrderConfirmationPage();\n            break;\n        case '/orders.html':\n            renderOrdersPage();\n            break;\n    }\n\n    // --- Event Delegation for Cart Interactions (after page-specific initialization) ---\n    document.addEventListener('click', (event) => {\n        if (event.target.classList.contains('add-to-cart-button')) {\n            const productId = parseInt(event.target.dataset.productId);\n            addToCart(productId);\n        } else if (event.target.classList.contains('remove-from-cart-button')) {\n            const productId = parseInt(event.target.dataset.productId);\n            removeFromCart(productId);\n        }\n    });\n\n    // Event delegation for quantity input changes (cart page)\n    document.addEventListener('input', (event) => {\n        if (event.target.classList.contains('quantity-input')) {\n            const productId = parseInt(event.target.dataset.productId);\n            const newQuantity = parseInt(event.target.value);\n            updateCartItemQuantity(productId, newQuantity);\n        }\n    });
}