{}, textContent = '') => {\n    const element = document.createElement(tag);\n    for (const key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n            element.setAttribute(key, attributes[key]);\n        }\n    }\n    if (textContent) {\n        element.textContent = textContent;\n    }\n    return element;
};\n\n\n// --- Data Storage (Local Storage) ---\n\nconst localStorageKey = 'ecommerceData';\n\nconst loadData = () => {\n    try {\n        const data = localStorage.getItem(localStorageKey);\n        return data ? JSON.parse(data) : { products: [], cart: [], users: [], orders: [], loggedInUser: null };\n    } catch (error) {\n        console.error("Error loading data from local storage:", error);\n        return { products: [], cart: [], users: [], orders: [], loggedInUser: null }; // Return default data on error\n    }
};\n\n\nconst saveData = (data) => {\n    try {\n        localStorage.setItem(localStorageKey, JSON.stringify(data));\n    } catch (error) {\n        console.error("Error saving data to local storage:", error);\n    }
};\n\n\n\n// ---  State Management ---\n\nlet state = loadData();\n\n\nconst updateState = (newState) => {\n    state = { ...state, ...newState };\n    saveData(state);\n    renderApp(); // Re-render the UI after state changes
};\n\n// ---  Product Data (Example -  In a real app, this would come from an API) ---\n\nconst initialProducts = [\n    { id: '1', name: 'Product 1', description: 'Description for Product 1', price: 25.99, image: 'product1.jpg', category: 'Electronics' },\n    { id: '2', name: 'Product 2', description: 'Description for Product 2', price: 50.00, image: 'product2.jpg', category: 'Clothing' },\n    { id: '3', name: 'Product 3', description: 'Description for Product 3', price: 10.50, image: 'product3.jpg', category: 'Books' },\n    { id: '4', name: 'Product 4', description: 'Description for Product 4', price: 75.00, image: 'product4.jpg', category: 'Electronics' },\n    { id: '5', name: 'Product 5', description: 'Description for Product 5', price: 12.99, image: 'product5.jpg', category: 'Clothing' },\n];\n\nif (state.products.length === 0) {\n    updateState({ products: initialProducts }); // Initialize products if not already present
}\n\n\n\n// ---  Routing ---\n\nlet currentPage = window.location.pathname;\n\n\nconst navigateTo = (path) => {\n    window.history.pushState({ path }, '', path);\n    currentPage = path;\n    renderApp();
};\n\nwindow.onpopstate = () => {\n    currentPage = window.location.pathname;\n    renderApp();
};\n\n\n\n// --- UI Rendering Functions ---\n\nconst renderProductCard = (product) => {\n    const card = createElement('div', { class: 'product-card', 'data-product-id': product.id });\n    card.innerHTML = `\n        <img src="${product.image}" alt="${product.name}" width="150">\n        <h3>${product.name}</h3>\n        <p>${product.description}</p>\n        <p>$${product.price.toFixed(2)}</p>\n        <button class="add-to-cart-button">Add to Cart</button>\n    `;\n    return card;
};\n\n\nconst renderProductDetails = (productId) => {\n    const product = state.products.find(p => p.id === productId);\n    if (!product) {\n        return createElement('p', {}, 'Product not found');\n    }\n\n    const details = createElement('div', { class: 'product-details' });\n    details.innerHTML = `\n        <img src="${product.image}" alt="${product.name}" width="300">\n        <h2>${product.name}</h2>\n        <p>${product.description}</p>\n        <p>Price: $${product.price.toFixed(2)}</p>\n        <button class="add-to-cart-button" data-product-id="${product.id}">Add to Cart</button>\n    `;\n    return details;
};\n\n\n\nconst renderProductsPage = () => {\n    const productsContainer = $('productsContainer');\n    if (!productsContainer) {\n        return; // handle the case when productsContainer is not found\n    }\n\n    productsContainer.innerHTML = '';  // Clear existing content\n\n    // Filtering and Sorting (Example)\n    const categoryFilter = $('categoryFilter') ? $('categoryFilter').value : 'all';\n    const sortOption = $('sortSelect') ? $('sortSelect').value : 'default';\n\n    let filteredProducts = [...state.products]; // Create a copy to avoid modifying the original\n\n    if (categoryFilter !== 'all') {\n        filteredProducts = filteredProducts.filter(product => product.category === categoryFilter);\n    }\n\n    if (sortOption === 'priceAsc') {\n        filteredProducts.sort((a, b) => a.price - b.price);\n    } else if (sortOption === 'priceDesc') {\n        filteredProducts.sort((a, b) => b.price - a.price);\n    }\n\n\n    filteredProducts.forEach(product => {\n        productsContainer.appendChild(renderProductCard(product));\n    });\n\n    //Event Listener Delegation for Add to Cart button\n    productsContainer.addEventListener('click', (event) => {\n      if (event.target.classList.contains('add-to-cart-button')) {\n        const productId = event.target.closest('.product-card').dataset.productId; //Get the product id\n        addToCart(productId);\n      }\n    });
};\n\n\n\nconst renderCartPage = () => {\n    const cartContainer = $('cartContainer');\n    if (!cartContainer) {\n        return;\n    }\n    cartContainer.innerHTML = '';\n\n    if (state.cart.length === 0) {\n        cartContainer.innerHTML = '<p>Your cart is empty.</p>';\n        return;\n    }\n\n\n    let total = 0;\n\n    state.cart.forEach(cartItem => {\n        const product = state.products.find(p => p.id === cartItem.productId);\n        if (!product) {\n            return; // Skip if product not found\n        }\n\n        const itemTotal = product.price * cartItem.quantity;\n        total += itemTotal;\n\n        const cartItemElement = createElement('div', { class: 'cart-item' });\n        cartItemElement.innerHTML = `\n            <p>${product.name} - $${product.price.toFixed(2)} x ${cartItem.quantity} = $${itemTotal.toFixed(2)}</p>\n            <button class="change-quantity-button" data-product-id="${cartItem.productId}" data-change="-1">-</button>\n            <button class="change-quantity-button" data-product-id="${cartItem.productId}" data-change="1">+</button>\n            <button class="remove-from-cart-button" data-product-id="${cartItem.productId}">Remove</button>\n        `;\n        cartContainer.appendChild(cartItemElement);\n    });\n\n    const totalElement = createElement('p', {}, `Total: $${total.toFixed(2)}`);\n    cartContainer.appendChild(totalElement);\n\n    const checkoutButton = createElement('button', { id: 'checkoutButton' }, 'Checkout');\n    cartContainer.appendChild(checkoutButton);\n\n\n     //Event Listener Delegation for buttons inside cart\n    cartContainer.addEventListener('click', (event) => {\n        if (event.target.classList.contains('remove-from-cart-button')) {\n            const productId = event.target.dataset.productId;\n            removeFromCart(productId);\n        } else if (event.target.classList.contains('change-quantity-button')) {\n            const productId = event.target.dataset.productId;\n            const change = parseInt(event.target.dataset.change);\n            changeQuantity(productId, change);\n        } else if (event.target.id === 'checkoutButton') {\n          if(state.cart.length > 0) { // only proceed to checkout if cart is not empty\n            navigateTo('/checkout.html');\n          } else {\n            alert('Your cart is empty. Add items to your cart before checking out.');\n          }\n        }\n    });
};\n\n\nconst renderCheckoutPage = () => {\n    const checkoutContainer = $('checkoutContainer');\n    if (!checkoutContainer) {\n        return;\n    }\n    checkoutContainer.innerHTML = ''; // Clear existing content\n\n    if (!state.loggedInUser) {\n        checkoutContainer.innerHTML = '<p>Please login to checkout.</p>';\n        return;\n    }\n    if (state.cart.length === 0) {\n        checkoutContainer.innerHTML = '<p>Your cart is empty.</p>';\n        return;\n    }\n\n    let total = 0;\n    state.cart.forEach(cartItem => {\n        const product = state.products.find(p => p.id === cartItem.productId);\n        if (product) {\n            total += product.price * cartItem.quantity;\n        }\n    });\n\n    const checkoutForm = createElement('form', { id: 'checkoutForm' });\n    checkoutForm.innerHTML = `\n        <h2>Shipping Information</h2>\n        <label for="shippingAddress">Shipping Address:</label>\n        <input type="text" id="shippingAddress" required><br><br>\n\n        <h2>Payment Information</h2>\n        <label for="cardNumber">Card Number:</label>\n        <input type="text" id="cardNumber" required><br><br>\n        <label for="expiryDate">Expiry Date:</label>\n        <input type="text" id="expiryDate" required><br><br>\n        <label for="cvv">CVV:</label>\n        <input type="text" id="cvv" required><br><br>\n\n        <p>Total: $${total.toFixed(2)}</p>\n        <button type="submit">Place Order</button>\n    `;\n\n    checkoutContainer.appendChild(checkoutForm);\n\n    checkoutForm.addEventListener('submit', (event) => {\n        event.preventDefault(); // Prevent form submission\n\n        // Form validation (basic)\n        const shippingAddress = $('shippingAddress').value;\n        const cardNumber = $('cardNumber').value;\n        const expiryDate = $('expiryDate').value;\n        const cvv = $('cvv').value;\n\n        if (!shippingAddress || !cardNumber || !expiryDate || !cvv) {\n            alert('Please fill in all fields.');\n            return;\n        }\n\n        // Simulate order placement (replace with actual API call)\n        const order = {\n            userId: state.loggedInUser.id,\n            items: state.cart,\n            total: total,\n            shippingAddress: shippingAddress,\n            orderDate: new Date().toISOString(),\n        };\n\n        updateState({\n            orders: [...state.orders, order],\n            cart: [], // Clear the cart after placing the order\n        });\n\n        alert('Order placed successfully!');\n        navigateTo('/orders.html');\n    });
};\n\nconst renderOrdersPage = () => {\n    const ordersContainer = $('ordersContainer');\n    if (!ordersContainer) {\n        return;\n    }\n    ordersContainer.innerHTML = ''; // Clear\n\n    if (!state.loggedInUser) {\n        ordersContainer.innerHTML = '<p>Please login to view your orders.</p>';\n        return;\n    }\n\n    const userOrders = state.orders.filter(order => order.userId === state.loggedInUser.id);\n\n    if (userOrders.length === 0) {\n        ordersContainer.innerHTML = '<p>You have no orders.</p>';\n        return;\n    }\n\n    userOrders.forEach(order => {\n        const orderElement = createElement('div', { class: 'order' });\n        orderElement.innerHTML = `\n            <p>Order Date: ${new Date(order.orderDate).toLocaleDateString()}</p>\n            <p>Shipping Address: ${order.shippingAddress}</p>\n            <ul>\n                ${order.items.map(item => {\n                    const product = state.products.find(p => p.id === item.productId);\n                    return `<li>${product ? product.name : 'Product Not Found'} x ${item.quantity}</li>`;\n                }).join('')}\n            </ul>\n            <p>Total: $${order.total.toFixed(2)}</p>\n        `;\n        ordersContainer.appendChild(orderElement);\n    });
};\n\n\nconst renderAccountPage = () => {\n    const accountContainer = $('accountContainer');\n    if (!accountContainer) {\n        return;\n    }\n    accountContainer.innerHTML = ''; // Clear existing content\n\n    if (!state.loggedInUser) {\n        accountContainer.innerHTML = '<p>Please login to view your account information.</p>';\n        return;\n    }\n\n    const accountInfo = createElement('div', { class: 'account-info' });\n    accountInfo.innerHTML = `\n        <h2>Account Information</h2>\n        <p>Username: ${state.loggedInUser.username}</p>\n        <p>Email: ${state.loggedInUser.email}</p>\n        <button id="logoutButton">Logout</button>\n    `;\n    accountContainer.appendChild(accountInfo);\n\n    $('logoutButton').addEventListener('click', logout);
};\n\n\n\nconst renderLoginPage = () => {\n    const loginContainer = $('loginContainer');\n    if (!loginContainer) {\n        return;\n    }\n    loginContainer.innerHTML = ''; // Clear existing content\n\n    const loginForm = createElement('form', { id: 'loginForm' });\n    loginForm.innerHTML = `\n        <h2>Login</h2>\n        <label for="username">Username:</label>\n        <input type="text" id="username" required><br><br>\n        <label for="password">Password:</label>\n        <input type="password" id="password" required><br><br>\n        <button type="submit">Login</button>\n        <p>Don't have an account? <a href="/register.html">Register</a></p>\n    `;\n    loginContainer.appendChild(loginForm);\n\n    loginForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        const username = $('username').value;\n        const password = $('password').value;\n\n        const user = state.users.find(u => u.username === username && u.password === password);\n\n        if (user) {\n            updateState({ loggedInUser: user });\n            alert('Login successful!');\n            navigateTo('/account.html');\n        } else {\n            alert('Invalid username or password.');\n        }\n    });
};\n\n\nconst renderRegisterPage = () => {\n    const registerContainer = $('registerContainer');\n    if (!registerContainer) {\n        return;\n    }\n    registerContainer.innerHTML = '';\n\n    const registerForm = createElement('form', { id: 'registerForm' });\n    registerForm.innerHTML = `\n        <h2>Register</h2>\n        <label for="username">Username:</label>\n        <input type="text" id="username" required><br><br>\n        <label for="email">Email:</label>\n        <input type="email" id="email" required><br><br>\n        <label for="password">Password:</label>\n        <input type="password" id="password" required><br><br>\n        <button type="submit">Register</button>\n        <p>Already have an account? <a href="/login.html">Login</a></p>\n    `;\n    registerContainer.appendChild(registerForm);\n\n    registerForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        const username = $('username').value;\n        const email = $('email').value;\n        const password = $('password').value;\n\n        if (state.users.some(u => u.username === username)) {\n            alert('Username already exists.');\n            return;\n        }\n\n        const newUser = {\n            id: String(state.users.length + 1), // Simple ID generation\n            username,\n            email,\n            password,\n        };\n        updateState({ users: [...state.users, newUser] });\n\n        alert('Registration successful! Please login.');\n        navigateTo('/login.html');\n    });
};\n\n\n\n// ---  UI Update Functions (called by renderApp) ---\n\nconst updateNavbar = () => {\n    const navbar = $('navbar');\n    if (!navbar) return;\n\n    navbar.innerHTML = `\n        <a href="/index.html">Home</a>\n        <a href="/products.html">Products</a>\n        <a href="/cart.html">Cart (${state.cart.length})</a>\n        ${state.loggedInUser ? `\n            <a href="/account.html">Account</a>\n        ` : `\n            <a href="/login.html">Login</a>\n            <a href="/register.html">Register</a>\n        `}\n    `;\n    //  Add event listeners to the navbar links using event delegation if necessary (for future use - single event on the navbar to handle clicks)\n    navbar.addEventListener('click', (event) => {\n        if (event.target.tagName === 'A') {\n            event.preventDefault(); // Prevent the default link behavior\n            const href = event.target.getAttribute('href');\n            if (href) {\n                navigateTo(href);\n            }\n        }\n    });
};\n\n\n\n// ---  Core Application Logic  ---\n\nconst addToCart = (productId) => {\n    // Check if the product exists\n    const productExists = state.products.some(product => product.id === productId);\n    if (!productExists) {\n        alert('Product not found.');\n        return;\n    }\n\n    const existingCartItem = state.cart.find(item => item.productId === productId);\n\n    if (existingCartItem) {\n        changeQuantity(productId, 1); // Increment quantity if already in cart\n    } else {\n        updateState({ cart: [...state.cart, { productId: productId, quantity: 1 }] });\n    }\n\n    alert('Item added to cart!');
};\n\n\n\nconst removeFromCart = (productId) => {\n    const updatedCart = state.cart.filter(item => item.productId !== productId);\n    updateState({ cart: updatedCart });\n    renderApp();  //Re-render to reflect changes in the cart
};\n\nconst changeQuantity = (productId, change) => {\n    const updatedCart = state.cart.map(item => {\n        if (item.productId === productId) {\n            const newQuantity = item.quantity + change;\n            if (newQuantity >= 1) { // Ensure quantity is at least 1\n                return { ...item, quantity: newQuantity };\n            } else {\n                return null; // Remove the item if quantity becomes 0 or less\n            }\n        }\n        return item;\n    }).filter(item => item !== null); // Filter out null items (removed items)\n\n    updateState({ cart: updatedCart });\n    renderApp(); // Re-render the cart
};\n\nconst logout = () => {\n    updateState({ loggedInUser: null });\n    navigateTo('/index.html'); // Redirect to home page after logout
};\n\n\n\n// ---  Rendering  ---\n\nconst renderPageContent = () => {\n    const contentContainer = $('content');\n    if (!contentContainer) {\n        return;\n    }\n    contentContainer.innerHTML = ''; // Clear existing content\n\n    switch (currentPage) {\n        case '/index.html':\n        case '/': //Handle the root path\n            contentContainer.innerHTML = '<h2>Welcome to Our Online Store!</h2><p>Browse our products and enjoy your shopping experience.</p>';\n            break;\n        case '/products.html':\n            renderProductsPage();\n            break;\n        case '/product_details.html':\n            //  Implement dynamic product detail page\n            const urlParams = new URLSearchParams(window.location.search);\n            const productId = urlParams.get('id');\n            if (productId) {\n                contentContainer.appendChild(renderProductDetails(productId));\n            } else {\n                contentContainer.innerHTML = '<p>Product details not found.</p>';\n            }\n            break;\n        case '/cart.html':\n            renderCartPage();\n            break;\n        case '/checkout.html':\n            renderCheckoutPage();\n            break;\n        case '/orders.html':\n            renderOrdersPage();\n            break;\n        case '/account.html':\n            renderAccountPage();\n            break;\n        case '/login.html':\n            renderLoginPage();\n            break;\n        case '/register.html':\n            renderRegisterPage();\n            break;\n        default:\n            contentContainer.innerHTML = '<p>Page not found.</p>';\n    }
};\n\n\n\nconst renderApp = () => {\n    updateNavbar();\n    renderPageContent();\n\n    //  Update the current URL in the browser's address bar if necessary.\n    //  This is important to ensure the back/forward buttons work correctly\n    if (window.location.pathname !== currentPage) {\n        window.history.pushState({ path: currentPage }, '', currentPage);\n    }
};\n\n// --- Event Listeners ---\n// -- Filters and Sorting (Products Page) --\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Ensure the products page content is initialized before adding event listeners\n    if (currentPage === '/products.html') {\n        renderProductsPage(); // Initial rendering of products page\n\n        const categoryFilter = $('categoryFilter');\n        const sortSelect = $('sortSelect');\n\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => {\n                renderProductsPage();\n            });\n        }\n\n        if (sortSelect) {\n            sortSelect.addEventListener('change', () => {\n                renderProductsPage();\n            });\n        }\n    }\n\n    renderApp(); // Initial Render
}